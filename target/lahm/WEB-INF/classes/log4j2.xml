<?xml version="1.0" encoding="UTF-8"?>
<!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->
<!-- status : 这个用于设置log4j2自身内部的信息输出,可以不设置,当设置成trace时,会看到log4j2内部各种详细输出 monitorInterval 
	monitorInterval：: Log4j能够自动检测修改配置文件和重新配置本身, 设置间隔秒数。 -->
<Configuration status="off" monitorInterval="3600">

	<properties>
		<!-- 配置日志文件输出目录 -->
		 <property name="LOG_HOME">/logs/ssm/</property>
		<!-- <property name="LOG_HOME">/opt/zssLog/</property> -->
	</properties>
	<!--先定义所有的appender -->
	<Appenders>
		<Console name="Console" target="SYSTEM_OUT">
			<!-- 控制台只输出level及以上级别的信息(onMatch),其他的直接拒绝(onMismatch) -->
			<ThresholdFilter level="debug" onMatch="ACCEPT"
				onMismatch="DENY" />
			<!-- 输出日志的格式 -->
			<PatternLayout charset="utf-8"
				pattern="%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %class{36} %L %M - %msg%xEx%n" />
		</Console>


		<!-- 这个会打印出所有的info及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档 -->
		<RollingFile name="RollingFileDebug" fileName="${LOG_HOME}/debug.log"
			filePattern="${LOG_HOME}/${date:yyyy-MM}/debug-%d{yyyy-MM-dd}-%i.log">
			<!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch） -->
			<ThresholdFilter level="debug" onMatch="ACCEPT"
				onMismatch="DENY" />
			<PatternLayout charset="utf-8" pattern="%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %class{36} %L %M - %msg%xEx%n" />
			<Policies>
				<TimeBasedTriggeringPolicy />
				<SizeBasedTriggeringPolicy size="100 MB" />
			</Policies>
		</RollingFile>
	
	</Appenders>
	<Loggers>

		<!-- 设置第三方日志系统输出级别为INFO -->
		<logger name="org.springframework" level="INFO"></logger>
		<logger name="org.mybatis" level="DEBUG"></logger>
		
		<!-- 将业务dao接口填写进去,并用控制台输出即可打印sql日志 -->
		<!-- <logger name="com.lhh.dao" level="DEBUG" additivity="false">
			<appender-ref ref="Console" />
		</logger> -->
		
		<!-- 配置日志的根节点 -->
		<root level="debug">
			<appender-ref ref="Console" />
			 <appender-ref ref="RollingFileDebug"/>
		</root>

	</Loggers>

</Configuration>
<!-- 获取Logger对象方式： // log4j2方式 private static final org.apache.logging.log4j.Logger 
	LOG = org.apache.logging.log4j.LogManager.getLogger(Logstrap.class); // slf4j方式 
	private static final org.slf4j.Logger LOG = org.slf4j.LoggerFactory.getLogger(LoggerFactory.class); -->